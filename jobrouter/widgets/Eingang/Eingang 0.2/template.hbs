<script> 
const role = JSON.parse(document.getElementById("invisibleRole").innerHTML);

const info = JSON.parse(document.getElementById("invisibleInfo").innerHTML);
for (const index in info) {
  if (typeof info[index] === 'object' && !Array.isArray(info[index])) {
    info[index] = Object.values(info[index]);
  }
}

const description = JSON.parse(document.getElementById("invisibleDetails").innerHTML);
for (const index in description) {
  if (typeof description[index] === 'object' && !Array.isArray(description[index])) {
    description[index] = Object.values(description[index]);
  }
}             
      

const links = JSON.parse(document.getElementById("invisibleLinks").innerHTML);
for (const index in links) {
  if (typeof links[index] === 'object' && !Array.isArray(links[index])) {
    links[index] = Object.values(links[index]);
  }
}


simplifyWidget();


function simplifyWidget(){
	
    const outerBox = document.getElementById('outerBox');
    let maxPages = {};
    let pageAmount = {};
    let startPage = {};
    let cPage = {}; 
	
    role.forEach((role, index) => { 
        startPage[index] = 1;
        pageAmount[index] = 5;
        cPage[index] = 1;
        maxPages[index] = Math.ceil(info[index].length / 5);
		
         //roleCreating
        let roleContainer = document.createElement('div');
            roleContainer.setAttribute('class', 'roleContainer');
        outerBox.appendChild(roleContainer);
        let roleName = document.createElement('a');
            roleName.setAttribute('class', 'roleName');
            roleName.innerHTML = role;   
        roleContainer.appendChild(roleName);

        let buttonContainer = {};
            buttonContainer[index] = document.createElement('div');
            buttonContainer[index].setAttribute('class', 'buttonContainer');
        roleContainer.appendChild(buttonContainer[index]);
        const createButtons = (current) => { 
            buttonContainer[index].innerHTML = "";
            for(let i = (current-1) * 5; i < ((current-1) * 5) + 5; i++){
                if(i < info[index].length){
                    let button = document.createElement('button');
						button.onclick = function () {
							location.href = "https://myjobrouter.de/jobrouter/?cmd=StepScreen&jrworkflowid=" + links[index][i];
						};
					    button.innerHTML = info[index][i];
                        button.setAttribute('class', 'processButton');
                    buttonContainer[index].appendChild(button);
                    let linebreak = document.createElement('br');
                    button.appendChild(linebreak);
                    let text = document.createElement('a');
						let time = new Date(description[index][(i*2)+1]);
							var options = { day: '2-digit', month: '2-digit', year: 'numeric' };
							var datePart = time.toLocaleDateString('de-DE', options);
							var timePart = time.toLocaleTimeString('de-DE', {hour: '2-digit', minute:'2-digit'});
							time = datePart + ' ' + timePart;
						let desc = description[index][(i*2)] + "<br>" + time;
                        text.innerHTML = desc;
                        text.setAttribute('class', 'description');
                    button.appendChild(text);
                }
            }
        };
        createButtons(cPage[index]);
        


        if(maxPages[index] > 1){
            let pagingContainer = {};
                pagingContainer[index] = document.createElement('div');
                pagingContainer[index].setAttribute('class', 'paginationContainer');
            roleContainer.appendChild(pagingContainer[index]);

           
            const createPagination = (current) => {
                pagingContainer[index].innerHTML = "";
                if(maxPages[index] > 4) {
                    if (cPage[index] < 4) {
                        startPage[index] = 1;
                    } else if (cPage[index] > 3 && cPage[index] < maxPages[index] - 2) {
                        startPage[index] = cPage[index] - 2;
                    } else if (cPage[index] > maxPages[index] - 3) {
                        startPage[index] = maxPages[index] - 4;
                    }
                }else{
                    pageAmount[index] = maxPages[index];
                }
                
                    const prevBtn = document.createElement("a");
                        prevBtn.href = "#0";
                        prevBtn.innerText = "\u003C";
                        prevBtn.setAttribute('class', 'prevBtn');
                    pagingContainer[index].appendChild(prevBtn);
            
                for(let i = startPage[index]; i < startPage[index] + pageAmount[index]; i++){
                    let page = document.createElement("a");
                    page.href = "#0";
                    page.innerText = i;
                    page.setAttribute('class', 'paging' + index);
                    if(i == current){
                        page.classList.add('active');
                    }
                    pagingContainer[index].appendChild(page);
                }
            
                    const nextBtn = document.createElement("a");
                        nextBtn.href = "#0";
                        nextBtn.innerText = "\u003E";
                        nextBtn.setAttribute('class', 'nextBtn');
                    pagingContainer[index].appendChild(nextBtn);
            };
            createPagination(cPage[index]);
            


            pagingContainer[index].addEventListener("click", (e) => {
                if (e.target.classList.contains("prevBtn")) {
                    if (cPage[index] > 1) {
                        cPage[index]--;
                    }
                } else if (e.target.classList.contains("nextBtn")) {
                    if (cPage[index] < maxPages[index]) {
                        cPage[index]++;
                    }
                } else if (e.target.classList.contains('paging' + index)) {
                    cPage[index] = parseInt(e.target.innerText);
                }
                createButtons(cPage[index]); 
                createPagination(cPage[index]);
            });
        }    
    })
}
</script>
<style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

#outerBox{
	font-family: 'Poppins', sans-serif;
	overflow-y: auto;
	max-height: 100%;
}

#invisibleRole, #invisibleInfo, #invisibleLinks, #invisibleDetails{
	display: none;
}
.roleName{
    color: black;
    background-color: #fecc01;
    font-size: 18px;
    border-radius: 5px;
	width: 100%;
	display: inline-block;
	font-weight: 600;
}

.roleContainer{
    margin-bottom: 5%;
	margin-left: 1%;
	margin-right: 1%;
    text-align: center;
}

.processButton{
    background-color: white;
    border: 1px solid #A7ABB6;
    color: black;
    padding: 5px 10px;
    width: 100%;
    text-align: left;
    display: inline-block;
    transition-duration: 1s;
    transition: all 0.5s;
    cursor: pointer;
    box-sizing: border-box;
    margin: 3px;
    border-radius: 10px;
    font-size: 13px;
	font-weight: 500;
}

.description{
    text-align: left;
    font-size: 10px;
    line-height: 150%;
    word-wrap: break-word;
	display: inline-block;
}

.processButton:hover{
    background-color: #fecc01;
    border: 1px solid #fecc01;
    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
    transition: 0.5s;
}


.paginationContainer{
    background: #fecc01;
    text-align: center;
    margin: auto;
    border-radius: 60px;
    padding-left: 3px;
    padding-right: 3px;
    display: inline-block;
}

[class*="paging"], [class*="Btn"]{
    color: black;
    display: inline-block;
    background-color: #fecc01;
    border-radius: 50%;
    padding: 8px;
    margin: 5px;
    text-decoration: none;
    font-size: 12px;
    width: 15px;
    height: 15px;
    line-height: 15px;
	font-weight: 700;
}

[class*="paging"]:hover, [class*="Btn"]:hover{
    transform: scale(1.2);
    transition: 0.3s;
    background-color: #3a3e4c;
	color: white;
}

[class*="paging"].active {
    background-color: #242630;
    color: white;
    border-radius: 50%;
    padding: 8px;
}

[class*="paging"]:hover:not(.active) {
    background-color: #3a3e4c;
	color: white;
}
</style>

<div id="invisibleRole">{{JobFunctions}}</div>
<div id="invisibleInfo">{{processBox}}</div>
<div id="invisibleLinks">{{Links}}</div>
<div id="invisibleDetails">{{description}}</div>
	<div id="outerBox"></div>
